package com.tusaryan.TestingApp.services.impl;

import com.tusaryan.TestingApp.TestContainerConfiguration;
import com.tusaryan.TestingApp.dto.EmployeeDto;
import com.tusaryan.TestingApp.entities.Employee;
import com.tusaryan.TestingApp.exceptions.ResourceNotFoundException;
import com.tusaryan.TestingApp.repositories.EmployeeRepository;
import com.tusaryan.TestingApp.services.EmployeeService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Import;

import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@Import(TestContainerConfiguration.class)
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
@ExtendWith(MockitoExtension.class)
class EmployeeServiceImplTest {

    @Mock
    private EmployeeRepository employeeRepository;

    @Spy
    private ModelMapper modelMapper;

    @InjectMocks
    private EmployeeServiceImpl employeeService;

    private Employee mockEmployee;
    private EmployeeDto mockEmployeeDto;

    @BeforeEach
    void setup() {
        mockEmployee = Employee.builder()
                .id(1L)
                .email("tusak@gmail.com")
                .name("Tus")
                .salary(200L)
                .build();
        mockEmployeeDto = modelMapper.map(mockEmployee, EmployeeDto.class);
    }

    @Test
    void testGetEmployeeById_WhenEmployeeIdIsPresent_ThenReturnEmployeeDto () {
//        assign
        Long id = mockEmployee.getId();
        //import as static from org.mockito.Mockito.when;
        when(employeeRepository.findById(id)).thenReturn(Optional.of(mockEmployee)); //Stubbing


//        act
        EmployeeDto employeeDto = employeeService.getEmployeeById(id);

//        assert
        assertThat(employeeDto).isNotNull();
        assertThat(employeeDto.getId()).isEqualTo(id);
        assertThat(employeeDto.getEmail()).isEqualTo(mockEmployee.getEmail());

        //to check whether this findById method was called on this mock or not
        verify(employeeRepository, times(1)).findById(id);
        verify(employeeRepository, atLeast(1)).findById(id);
        verify(employeeRepository, atMost(5)).findById(id);
        verify(employeeRepository, only()).findById(id);

        //to check whether this save method with null argument was called on this mock or not
//        verify(employeeRepository).save(null);

//        verify(employeeRepository).findById(2L);
    }

    @Test
    void testGetEmployeeById_WhenEmployeeIdIsNotPresent_ThenThrowException () {
//        arrange
//        throwing Optional empty because employeeRepository.findById() returns Optional of T / Employee
        when(employeeRepository.findById(anyLong())).thenReturn(Optional.empty());
//        act and assert
        assertThatThrownBy(() -> employeeService.getEmployeeById(1L))
                .isInstanceOf(ResourceNotFoundException.class)
                .hasMessage("Employee not found with id: 1");

        verify(employeeRepository).findById(1L);
    }

    @Test
    void testCreateNewEmployee_WhenValidEmployee_ThenCreateNewEmployee () {
//        assign
        //assigning the behavior on different method calls.
        //returning empty list of employees when findByEmail is called.
        when(employeeRepository.findByEmail(anyString())).thenReturn(List.of());
        when(employeeRepository.save(any(Employee.class))).thenReturn(mockEmployee);

//        act
        //creating new employee
        EmployeeDto employeeDto = employeeService.createNewEmployee(mockEmployeeDto);

//        assert

        //checking if we are getting the same employeeDto back from a return statement
        //which should be equal to the mockEmployeeDto which is saved.
        assertThat(employeeDto).isNotNull();
        assertThat(employeeDto.getEmail()).isEqualTo(mockEmployeeDto.getEmail());
        //not required to check id as it could be different, since it is not passed
        // while creation (since autogenerated).

        //since we are creating something so verify if method is called or not.
//        verify(employeeRepository).save(any(Employee.class));

        ArgumentCaptor<Employee> employeeArgumentCaptor = ArgumentCaptor.forClass(Employee.class);
        verify(employeeRepository).save(employeeArgumentCaptor.capture());

        Employee capturedEmployee = employeeArgumentCaptor.getValue();
        //mockEmployee.getEmail() -> this was the actual value that we want to pass.
        assertThat(capturedEmployee.getEmail()).isEqualTo(mockEmployee.getEmail());
    }

    @Test
    void testCreateNewEmployee_WhenAttemptingToCreateEmployeeWithExistingEmail_ThenThrowException() {
//        arrange
        when(employeeRepository.findByEmail(mockEmployeeDto.getEmail())).thenReturn(List.of(mockEmployee));
//        act and assert
        assertThatThrownBy(() -> employeeService.createNewEmployee(mockEmployeeDto))
                .isInstanceOf(RuntimeException.class)
                .hasMessage("Employee already exists with email: " + mockEmployee.getEmail());

        verify(employeeRepository).findByEmail(mockEmployeeDto.getEmail());
        //since it is failing, so verify that employeeRepository never calls the save method.
        verify(employeeRepository, never()).save(any());
    }

    @Test
    void testUpdateEmployee_whenEmployeeDoesNotExists_thenThrowException () {
//        arrange
        when(employeeRepository.findById(1L)).thenReturn(Optional.empty());
//        act and assert
        assertThatThrownBy(() -> employeeService.updateEmployee(1L, mockEmployeeDto))
                .isInstanceOf(ResourceNotFoundException.class)
                .hasMessage("Employee not found with id: 1");

        verify(employeeRepository).findById(1L);
        //since it is failing, so verify that employeeRepository never calls the save method.
        verify(employeeRepository, never()).save(any());

    }

}